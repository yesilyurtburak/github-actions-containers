name: Deployment (Container)
on:
  push:
    branches:
      - main
      - dev
env:
  CACHE_KEY: node-deps
  MONGODB_DB_NAME: gha-demo
jobs:
  # remember that since we are using 'test' job inside a container, all test database connection etc. will be ended when the workflow completed. container is not gonna continue to run after workflow finished. This situation is completely different than where our real 'deployment database' runs continously. 
  test:
    environment: testing
    runs-on: ubuntu-latest
    # from now on 'test' job run on a container. Steps in the job are running on container. 
    # ubuntu-latest is the host for the container.
    container:
      image: node:16
      # env: ...    # --> if the docker image needs to use environment variables.
    env:
      MONGODB_CONNECTION_PROTOCOL: mongodb # from official documentation.
      MONGODB_CLUSTER_ADDRESS: mongodb # our service name which we defined in services. this is needed for communication between jobs ans service containers, since our 'test' job is inside a container.
      MONGODB_USERNAME: root # dummy credentials for test database.
      MONGODB_PASSWORD: example
      PORT: 8080
    # add the service containers inside the 'services' field. Initialize the 'mongo' service below.
    services:
      mongodb: # custom name
        image: mongo # base image name for the mongodb service container, found on 'hub.docker.com'
        env:
          MONGO_INITDB_ROOT_USERNAME: root # since we are in 'test job' we can write username & password here.
          MONGO_INITDB_ROOT_PASSWORD: example # these credentials are different than the credentials of actual deployment database.
    steps:
      - name: Get Code
        uses: actions/checkout@v3
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ env.CACHE_KEY }}-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Run server
        run: npm start & npx wait-on http://127.0.0.1:$PORT # requires MongoDB Atlas to accept requests from anywhere!
      - name: Run tests
        run: npm test
      - name: Output information
        run: |
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Output information
        env:
          PORT: 3000
        run: |        
          echo "MONGODB_DB_NAME: $MONGODB_DB_NAME"
          echo "MONGODB_USERNAME: $MONGODB_USERNAME"
          echo "${{ env.PORT }}"
